paths:
  /Cars:
    post:
      tags:
        - Car
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Car.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Car'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Car'
      deprecated: false
    put:
      tags:
        - Car
      summary: Update an existing model instance or insert a new one into the data source.
      operationId: Car.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/Car'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Car'
      deprecated: false
    get:
      tags:
        - Car
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Car.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Car'
      deprecated: false
  '/Cars/{id}/exists':
    get:
      tags:
        - Car
      summary: Check whether a model instance exists in the data source.
      operationId: 'Car.exists__get_Cars_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Cars/{id}':
    head:
      tags:
        - Car
      summary: Check whether a model instance exists in the data source.
      operationId: 'Car.exists__head_Cars_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Car
      summary: Find a model instance by id from the data source.
      operationId: Car.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Car'
      deprecated: false
    delete:
      tags:
        - Car
      summary: Delete a model instance by id from the data source.
      operationId: Car.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Car
      summary: Update attributes for a model instance and persist it into the data source.
      operationId: Car.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Car'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Car'
      deprecated: false
  /Cars/findOne:
    get:
      tags:
        - Car
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Car.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Car'
      deprecated: false
  /Cars/update:
    post:
      tags:
        - Car
      summary: Update instances of the model matched by where from the data source.
      operationId: Car.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/Car'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /Cars/count:
    get:
      tags:
        - Car
      summary: Count instances of the model matched by where from the data source.
      operationId: Car.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Cars/change-stream:
    post:
      tags:
        - Car
      summary: Create a change stream.
      operationId: Car.createChangeStream__post_Cars_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Car
      summary: Create a change stream.
      operationId: Car.createChangeStream__get_Cars_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
definitions:
  Car:
    properties:
      description:
        type: string
      id:
        type: number
        format: double
      img_url:
        type: string
      name:
        type: string
      price:
        type: number
        format: double
    required:
      - description
      - id
      - name
      - price
    additionalProperties: false
  x-any:
    properties: {}
swagger: '2.0'
info:
  x-ibm-name: carsdemo
  version: 1.0.0
  title: CarsDemo
schemes:
  - https
host: $(catalog.host)
basePath: /api
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  gateway: datapower-gateway
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: 'https://<REPLACE WITH REQUST URL>$(request.path)?language=$(request.parameters.language)'
          tls-profile: 'client:Loopback-client'
    catch: []
